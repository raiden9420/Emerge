I’m building a career counseling app called ‘Emerge’ in Replit, designed to empower students from all fields (like Biology, CS, Literature, Engineering, Arts, Math, Physics) by providing personalized, actionable career guidance. The app uses a React frontend, Express backend, and SQLite database, with the Gemini API for AI-driven features. Below is the app’s structure and functionalities, which I want to improve and expand:

App Purpose:
Emerge helps students take control of their career journeys by offering tailored recommendations, goal-setting tools, and insights based on their unique profiles.
It collects user data through a survey (subjects, interests, skills, goal, thinking style, extra info) and uses this to personalize the experience.
The app should feel smart, accessible (using free resources), and empowering, guiding students toward their career goals.
Current Structure:
Survey Page (First Login):
When a new user logs in, they fill out a survey to personalize their experience.
Survey fields: Subjects (multi-select: Biology, CS, Literature, etc.), Interests (text: e.g., ‘reading’), Skills (text: e.g., ‘lab work’), Goal (dropdown: Internship, Job, Learn More, Not Sure), Thinking Style (radio: Plan or Flow), Extra Info (textarea: e.g., ‘I love puzzles’).
Data is saved in SQLite (users table: id, username, subjects, interests, skills, goal, thinking_style, extra_info).
Dashboard (Main Page):
Sidebar:
Profile: Shows the user’s avatar (placeholder), username, and subjects (e.g., Biology). a Progress bar, keeping track of user's progress of completion of tasks. 

Navigation: Buttons like ‘Dashboard,’ (redirects to dashboard) ‘Career Coach’ (for a career counselling chatbot made with Gemini API), 'explore jobs' (redirects to linkedin jobs with user subject on search)
Main Content:
Header: ‘My Career Dashboard’ with a welcome message with username.
Learning Goals (To-Do List): A list of micro-goals (AI generated and subject relevant) with checkboxes, an ‘Add New Goal’ button for adding goals manually, and a ‘Refresh Suggestions’ button to get AI suggestions via Gemini API. Completion of goals will contribute to the progress bar. Also display user level along with progress bar eg. Level 1. New profile will start with level 1 and 0% progress
Personalized Recommendations: Shows 1 course (via Gemini API, e.g., ‘Intro to Biotech’) and 1 video (via YouTube Data API, e.g., ‘PCR Basics 2025’) with clickable links to free resources, relevant to user subject.
What’s Hot (Trends): Displays 1-2 articles (scraped from free sources like BLS.gov) 
Backend:

APIs:
Gemini API (key in Replit Secrets as GEMINI_API_KEY) for AI suggestions (goals, courses).
YouTube Data API (key in Replit Secrets) for video recommendations.

Current Functionalities:
Survey: Collects user data on first login and saves it to SQLite.
Dashboard:
Shows a progress bar based on the user’s journey 
To-Do List: Users can add goals, mark them as completed, and refresh for AI suggestions (e.g., ‘Learn PCR’ for Biology). completion of each 10 tasks levels the user up by 1.
Personalized Recommendations: Suggests 1 course (e.g., ‘Intro to Biotech’ via Gemini) and 1 video (e.g., ‘PCR Basics 2025’ via YouTube API) with free links.
What’s Hot: Shows 1-2 articles related to the user’s subject, with a ‘Refresh Trends’ button.
Personalization: All features use the user’s survey data (e.g., subjects, goal) to tailor content.
Career Coach Chatbot:
Add a ‘Career Coach’ chatbot that launches when the user clicks the ‘Career Coach’ button in the sidebar.
The chatbot should open as a full-page interface, replacing the dashboard view, with a ‘Back to Dashboard’ button to return.
It should say, ‘I am Emerge, let’s rise! How can I help you today?’ and provide personalized career advice using the user’s survey data (e.g., for a Biology student with an Internship goal, suggest steps to find biotech internships).
The user can type questions (e.g., ‘What should I do next?’), and the chatbot responds with tailored advice using the Gemini API.
Store the chat history in SQLite (e.g., in a chat_history table: id, user_id, message, sender, timestamp) so it persists across sessions.

